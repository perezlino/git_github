Comandos estudiados
===================

1-Git fundamentos / 1-Primeros comandos Git
-------------------------------------------
git help
git help 'comando'
git version --
git config --global user.name "nombre"
git config --global user.email "correo"
git config --global -e

1-Git fundamentos / 2-Nuestro primer repositorio
------------------------------------------------
git init
git status
git add 'archivo'
git add .
git add --all
git add -A
git reset                          =>  Revertir la carga de un archivo al **stage**
git commit -m 'descripcion'

1-Git fundamentos / 3-Reconstruir un proyecto de acuerdo al ultimo commit
-------------------------------------------------------------------------
git checkout -- .                  => Revertir la modificación de un archivo después de haber sido guardado

1-Git fundamentos / 4-Visualizar la rama en la que nos encontramos
------------------------------------------------------------------
git branch

1-Git fundamentos / 5-Demostracion de la creacion, puesta en escena y commits
-----------------------------------------------------------------------------
git commit -am 'descripcion'
git log

1-Git fundamentos / 7-Diferentes formas de agregar archivos al stage
--------------------------------------------------------------------
git add *.extension
git add directorio/*.extension
git add directorio/
git add directorio/subdirectorio
git reset *.extension

1-Git fundamentos / 8-Otras formas de revisar el log y los cambios desde el último commit
-----------------------------------------------------------------------------------------
git log --oneline
git log --oneline --decorate --all --graph
git status -s
git status --short
git status -s -b

1-Git fundamentos / 9-Crear Alias para nuestros comandos
--------------------------------------------------------
git config --global alias.nombre_alias "comando a renombrar"

1-Git fundamentos / 10-Revisar datos de configuracion
-----------------------------------------------------
git config --global -l

==================================================================================================
==================================================================================================

2-Un poco más allá de los fundamentos de Git / 1-Cambios en los archivos
------------------------------------------------------------------------
git diff
git diff --staged
git reset 
git reset HEAD 
git checkout -- .

2-Un poco más allá de los fundamentos de Git / 2-Actualizar mensaje del commit y revertir commits
-------------------------------------------------------------------------------------------------
git commit --amend -m "descripcion"
git reset --soft HEAD^                     => Eliminamos el último commit

2-Un poco más allá de los fundamentos de Git / 3-Preparando un repositorio para viajes en el tiempo
---------------------------------------------------------------------------------------------------
git commit
git commit --amend

2-Un poco más allá de los fundamentos de Git / 4-Viajes en el tiempo, resets y reflog
-------------------------------------------------------------------------------------
git reset --soft hash_previo_al_ultimo_commit
git reset --mixed hash_previo_al_ultimo_commit
git reset --hard hash_previo_al_ultimo_commit
git reflog

2-Un poco más allá de los fundamentos de Git / 5-Cambiar el nombre y eliminar archivos mediante git
---------------------------------------------------------------------------------------------------
git mv <nombre_archivo> <nuevo_nombre_archivo>
git rm <nombre_archivo>
git reset --hard

2-Un poco más allá de los fundamentos de Git / 6-Cambiar el nombre y eliminar archivos fuera de git (VSCode)
------------------------------------------------------------------------------------------------------------
git add -u

==================================================================================================
==================================================================================================

3-Ramas, uniones, conflictos y tags / 2-Merge Fast-Forward
----------------------------------------------------------
git branch <nombre_rama>
git checkout <nombre_rama>
git diff <rama_1> <rama_2>
git merge <nombre_rama>
git branch -d <nombre_rama>
git branch -d <nombre_rama> -f

3-Ramas, uniones, conflictos y tags / 3-Merge Union Automatica
--------------------------------------------------------------
git checkout -b <nombre_rama>

3-Ramas, uniones, conflictos y tags / 5-Merge Uniones con conflictos
--------------------------------------------------------------------
git tag <nombre_tag>
git tag -d <nombre_tag>
git tag -a <nombre_tag> -m <descripcion>
git tag -a <nombre_tag> <hash_commit> -m <descripcion>
git show <nombre_tag o hash>

==================================================================================================
==================================================================================================

4-Git Stash y Git Rebase - Para realizar cambios de emergencia / 1-Git Stash
----------------------------------------------------------------------------
git stash
git stash list
git stash pop

4-Git Stash y Git Rebase - Para realizar cambios de emergencia / 2-Conflictos con el stash
------------------------------------------------------------------------------------------
git stash drop

4-Git Stash y Git Rebase - Para realizar cambios de emergencia / 3-Mas informacion sobre el stash
-------------------------------------------------------------------------------------------------
git stash
git stash save
git stash save "descripcion"
git stash apply = git stash apply stash@{0}
git stash apply stash@{}
git stash drop = git stash drop stash@{0}
git stash drop stash@{}
git stash save --keep-index
git stash save --include-untracked
git stash list --stat
git show stash
git show stash@{}
git stash clear